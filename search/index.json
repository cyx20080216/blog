[{"categories":["题解"],"contents":"这道题应该使用动态规划 但是我们一看题目就会发现，这样做时间复杂度会达到$O(n^4)$\n于是大佬们就开始用线段树等来进行优化\n可是真的需要优化吗?\n让我们算一算：\n$R,C\u0026lt;=100$\n$O(n^4)$的复杂度会使循环体被运行$10^8$次，约$530$毫秒，而且实际运算时时间会更短\n所以，这道题不需要优化\nCode:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55  #include\u0026lt;bits/stdc++.h\u0026gt;using namespace std; template\u0026lt;typename type\u0026gt; inline void read(type \u0026amp; num) { num=0; bool flag=0; char ch=getchar(); while(!(ch\u0026gt;=\u0026#39;0\u0026#39;\u0026amp;\u0026amp;ch\u0026lt;=\u0026#39;9\u0026#39;)) flag=(ch==\u0026#39;-\u0026#39;),ch=getchar(); while(ch\u0026gt;=\u0026#39;0\u0026#39;\u0026amp;\u0026amp;ch\u0026lt;=\u0026#39;9\u0026#39;) num=(num\u0026lt;\u0026lt;1)+(num\u0026lt;\u0026lt;3)+(ch^\u0026#39;0\u0026#39;),ch=getchar(); num=(flag?-num:num); } template\u0026lt;typename type\u0026gt; inline void write(type num) { if(num==0) { putchar(\u0026#39;0\u0026#39;); return; } char sta[30]; short top=-1; if(num\u0026lt;0) putchar(\u0026#39;-\u0026#39;); while(num!=0) sta[++top]=(char)(num%10\u0026lt;0?-(num%10):num%10),num/=10; while(top\u0026gt;=0) putchar(sta[top]+\u0026#39;0\u0026#39;),top--; } #define M 1000000007 int r,c,k; int maps[101][101],f[101][101]; inline void dp() { f[1][1]=1; for(int i=1;i\u0026lt;=r;i++) { for(int j=1;j\u0026lt;=c;j++) { if(i==1\u0026amp;\u0026amp;j==1) continue; for(int k=1;k\u0026lt;i;k++) { for(int l=1;l\u0026lt;j;l++) if(maps[i][j]!=maps[k][l]) f[i][j]=(f[i][j]+f[k][l])%M; } } } } int main() { read(r),read(c),read(k); for(int i=1;i\u0026lt;=r;i++) { for(int j=1;j\u0026lt;=c;j++) read(maps[i][j]); } dp(); write(f[r][c]); return 0; }   ","permalink":"https://cyx20080216.github.io/blog/post/solution-p4825/","tags":["题解","洛谷"],"title":"题解 P4825 【[USACO15FEB]Cow Hopscotch S】"},{"categories":null,"contents":"这是一名OIer的个人博客。\n平常会发一些题解，还有踩坑心得。\n","permalink":"https://cyx20080216.github.io/blog/abaut/","tags":null,"title":"关于"},{"categories":null,"contents":"","permalink":"https://cyx20080216.github.io/blog/search/","tags":null,"title":"🔍"},{"categories":["算法"],"contents":"不知道为什么，我对着百度百科看，感觉找到的 Miller-Rabin 算法代码都是错的，便自己对着百度百科写了一个，分享出来\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47  #include\u0026lt;stdlib.h\u0026gt;int qPower(const int \u0026amp;a,const int \u0026amp;b,const int \u0026amp;m) { if(b==0) return 1; else if(b%2==0) { int tmp=qPower(a,b/2,m); return tmp*tmp%m; } else { int tmp=qPower(a,b/2,m); return tmp*tmp%m*a%m; } } inline bool MillerRabin(const int \u0026amp;n,const int \u0026amp;testTime=8) { if(n==0||n==1) return 0; if(n==2) return 1; int d=n-1; int s=0; while(d%2==0) { d/=2; s++; } for(int i=1;i\u0026lt;=testTime;i++) { int a=rand()%(n-2)+2; bool flag=0; int tmp=qPower(a,d,n); for(int r=0;r\u0026lt;s;r++) { if(tmp==1||qPower(a,(1\u0026lt;\u0026lt;r)*d,n)==n-1) { flag=1; break; } } if(!flag) return 0; } return 1; }   ","permalink":"https://cyx20080216.github.io/blog/post/miller-rabin/","tags":["算法"],"title":"Miller-Rabin素性测试"},{"categories":["游戏"],"contents":"该博文汇集了一些博主做的小游戏 二十四点解题：\ninclude\u0026lt;bits/stdc++.h\u0026gt;#define EXP 1e-7 using namespace std; struct Element { enum ElementType{add=0,sub=1,mul=2,div=3,mod=4,num=5}; ElementType type; double data; Element(): type(num), data(0) { } Element(const ElementType \u0026amp;t): type(t), data(0) { } Element(const double \u0026amp;n): type(num), data(n) { } }; struct TreeNode { Element element; int f,l,r; TreeNode(const Element \u0026amp;_element,int _l=-1,int _r=-1,int _f=-1): element(_element), f(_f), l(_l), r(_r) { } }; inline double calc(const vector\u0026lt;Element\u0026gt; \u0026amp;expr) { stack\u0026lt;double\u0026gt; sta; for(vector\u0026lt;Element\u0026gt;::const_iterator i=expr.begin();i!=expr.end();i++) { if(i-\u0026gt;type==Element::num) sta.push(i-\u0026gt;data); else { if(sta.size()\u0026lt;2) throw 400; double a,b; b=sta.top(); sta.pop(); a=sta.top(); sta.pop(); if(i-\u0026gt;type==Element::add) sta.push(a+b); else if(i-\u0026gt;type==Element::sub) sta.push(a-b); else if(i-\u0026gt;type==Element::mul) sta.push(a*b); else if(i-\u0026gt;type==Element::div) { if(fabs(b-0)\u0026lt;=EXP) throw 500; sta.push(a/b); } else { if(fabs(b-0)\u0026lt;=EXP) throw 500; sta.push(a-floor(a/b)*b); } } } if(sta.size()!=1) throw 400; return sta.top(); } inline vector\u0026lt;TreeNode\u0026gt; makeTree(const vector\u0026lt;Element\u0026gt; \u0026amp;expr) { vector\u0026lt;TreeNode\u0026gt; tree; stack\u0026lt;int\u0026gt; sta; for(vector\u0026lt;Element\u0026gt;::const_iterator i=expr.begin();i!=expr.end();i++) { if(i-\u0026gt;type==Element::num) { tree.push_back(TreeNode(*i)); sta.push(tree.size()-1); } else { if(sta.size()\u0026lt;2) throw 400; int a,b; b=sta.top(); sta.pop(); a=sta.top(); sta.pop(); tree.push_back(TreeNode(*i,a,b)); tree[a].f=tree.size()-1; tree[b].f=tree.size()-1; sta.push(tree.size()-1); } } return tree; } const string optsChar[5]={\u0026#34;﹢\u0026#34;,\u0026#34;﹣\u0026#34;,\u0026#34;×\u0026#34;,\u0026#34;÷\u0026#34;,\u0026#34;%\u0026#34;,}; int nums[4]; inline vector\u0026lt;Element\u0026gt; makeExpr(int a,int b,int c,int d,int opt1_id,int opt2_id,int opt3_id,int t) { vector\u0026lt;Element\u0026gt; expr; if(t==0) { expr.push_back(Element(a)); expr.push_back(Element(b)); expr.push_back(Element(Element::ElementType(opt1_id))); expr.push_back(Element(c)); expr.push_back(Element(Element::ElementType(opt2_id))); expr.push_back(Element(d)); expr.push_back(Element(Element::ElementType(opt3_id))); } else if(t==1) { expr.push_back(Element(a)); expr.push_back(Element(b)); expr.push_back(Element(Element::ElementType(opt1_id))); expr.push_back(Element(c)); expr.push_back(Element(d)); expr.push_back(Element(Element::ElementType(opt3_id))); expr.push_back(Element(Element::ElementType(opt2_id))); } else if(t==2) { expr.push_back(Element(a)); expr.push_back(Element(b)); expr.push_back(Element(c)); expr.push_back(Element(Element::ElementType(opt2_id))); expr.push_back(Element(Element::ElementType(opt1_id))); expr.push_back(Element(d)); expr.push_back(Element(Element::ElementType(opt3_id))); } else if(t==3) { expr.push_back(Element(a)); expr.push_back(Element(b)); expr.push_back(Element(c)); expr.push_back(Element(Element::ElementType(opt2_id))); expr.push_back(Element(d)); expr.push_back(Element(Element::ElementType(opt3_id))); expr.push_back(Element(Element::ElementType(opt1_id))); } else { expr.push_back(Element(a)); expr.push_back(Element(b)); expr.push_back(Element(c)); expr.push_back(Element(d)); expr.push_back(Element(Element::ElementType(opt3_id))); expr.push_back(Element(Element::ElementType(opt2_id))); expr.push_back(Element(Element::ElementType(opt1_id))); } return expr; } inline string intToString(int num) { if(num==0) return \u0026#34;0\u0026#34;; char sta[15]; short top=-1; string str; if(num\u0026lt;0) str=\u0026#34;-\u0026#34;; while(num!=0) sta[++top]=(char)(num%10\u0026lt;0?-(num%10):num%10),num/=10; while(top\u0026gt;=0) str.push_back(sta[top]+\u0026#39;0\u0026#39;),top--; return str; } void dfs(const vector\u0026lt;TreeNode\u0026gt; \u0026amp;tree,string \u0026amp;str,const int \u0026amp;pos) { #define PRI(TYPE) ((TYPE)==Element::add||(TYPE)==Element::sub?1:2) \tif(tree[pos].element.type==Element::num) str.append(intToString(tree[pos].element.data)); else { if(!(tree[pos].f==-1||PRI(tree[pos].element.type)\u0026gt;PRI(tree[tree[pos].f].element.type)||\\ (PRI(tree[pos].element.type)==PRI(tree[tree[pos].f].element.type)\u0026amp;\u0026amp;pos==tree[tree[pos].f].l))) str.push_back(\u0026#39;(\u0026#39;); dfs(tree,str,tree[pos].l); str.append(optsChar[tree[pos].element.type]); dfs(tree,str,tree[pos].r); if(!(tree[pos].f==-1||PRI(tree[pos].element.type)\u0026gt;PRI(tree[tree[pos].f].element.type)||\\ (PRI(tree[pos].element.type)==PRI(tree[tree[pos].f].element.type)\u0026amp;\u0026amp;pos==tree[tree[pos].f].l))) str.push_back(\u0026#39;)\u0026#39;); } #undef PRI } inline void print(const vector\u0026lt;Element\u0026gt; \u0026amp;expr) { vector\u0026lt;TreeNode\u0026gt; tree=makeTree(expr); int root; for(int i=0;i\u0026lt;tree.size();i++) { if(tree[i].f==-1) { root=i; break; } } string str; dfs(tree,str,root); cout\u0026lt;\u0026lt;str\u0026lt;\u0026lt;\u0026#34;\\n\u0026#34;; } inline int check(const vector\u0026lt;Element\u0026gt; \u0026amp;expr) { try { return fabs(calc(expr)-24)\u0026lt;=EXP; } catch(int error_code) { if(error_code==500) return 0; else { printf(\u0026#34;Unknown error! \u0026#34;); return 0; } } } inline void sol1(int a,int b,int c,int d) { for(int i=0;i\u0026lt;4;i++) { for(int j=0;j\u0026lt;4;j++) { for(int k=0;k\u0026lt;4;k++) { for(int t=0;t\u0026lt;5;t++) { vector\u0026lt;Element\u0026gt; expr=makeExpr(a,b,c,d,i,j,k,t); if(check(expr)) print(expr); } } } } } inline void sol2() { for(int i=0;i\u0026lt;4;i++) { for(int j=0;j\u0026lt;4;j++) { if(j==i) continue; for(int k=0;k\u0026lt;4;k++) { if(k==i||k==j) continue; for(int l=0;l\u0026lt;4;l++) { if(l==i||l==j||l==k) continue; sol1(nums[i],nums[j],nums[k],nums[l]); } } } } } int main() { //\tfreopen(\u0026#34;sol.txt\u0026#34;,\u0026#34;w\u0026#34;,stdout); \tscanf(\u0026#34;%d %d %d %d\u0026#34;,\u0026amp;nums[0],\u0026amp;nums[1],\u0026amp;nums[2],\u0026amp;nums[3]); sol2(); return 0; }   谁是卧底：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91  #include\u0026lt;stdio.h\u0026gt;#include\u0026lt;stdlib.h\u0026gt;#include\u0026lt;string\u0026gt;#include\u0026lt;time.h\u0026gt;#define CARD_NUM 15 using namespace std; bool pm_win(int peo_num,bool *peo_life,bool *wd_pla); bool wd_win(int peo_num,bool *peo_life,bool *wd_pla); int main() { string pm[CARD_NUM]={\u0026#34;包菜\u0026#34;,\u0026#34;包子\u0026#34;,\u0026#34;被子\u0026#34;,\u0026#34;壁纸\u0026#34;,\u0026#34;风扇\u0026#34;,\u0026#34;饼干\u0026#34;,\u0026#34;纸巾\u0026#34;,\u0026#34;橙子\u0026#34;,\u0026#34;唇膏\u0026#34;,\u0026#34;平板\u0026#34;,\u0026#34;保安\u0026#34;,\u0026#34;水盆\u0026#34;,\u0026#34;气泡\u0026#34;,\u0026#34;魔术师\u0026#34;,\u0026#34;双胞胎\u0026#34;}; string wd[CARD_NUM]={\u0026#34;生菜\u0026#34;,\u0026#34;饺子\u0026#34;,\u0026#34;床单\u0026#34;,\u0026#34;贴画\u0026#34;,\u0026#34;空调\u0026#34;,\u0026#34;薯片\u0026#34;,\u0026#34;湿巾\u0026#34;,\u0026#34;橘子\u0026#34;,\u0026#34;口红\u0026#34;,\u0026#34;ipad\u0026#34;,\u0026#34;保镖\u0026#34;,\u0026#34;水桶\u0026#34;,\u0026#34;水泡\u0026#34;,\u0026#34;魔法师\u0026#34;,\u0026#34;龙凤胎\u0026#34;}; int peo_num=0; printf(\u0026#34;请输入3~10的人数:\u0026#34;); scanf(\u0026#34;%d\u0026#34;,\u0026amp;peo_num); while(!(peo_num\u0026lt;11\u0026amp;\u0026amp;peo_num\u0026gt;2)) { system(\u0026#34;cls\u0026#34;); printf(\u0026#34;人数只能为3~10\u0026#34;); printf(\u0026#34;请输入3~10的人数:\u0026#34;); scanf(\u0026#34;%d\u0026#34;,\u0026amp;peo_num);\t} int wd_num=peo_num%2==0?peo_num/2-1:peo_num/2; int ran_num=time(NULL); srand((unsigned)ran_num); int ca_num=rand()%CARD_NUM; ran_num++; bool wd_pla[10]={0,}; bool peo_life[10]={1,1,1,1,1,1,1,1,1,1}; for(int i=0;i\u0026lt;peo_num;i++) { if(wd_num==0) break; if(wd_num==peo_num-i) { wd_pla[i]=1; wd_num--; } else if(rand()%peo_num\u0026lt;wd_num) { wd_pla[i]=1; ran_num++; wd_num--; } } system(\u0026#34;cls\u0026#34;); for(int i=1;i\u0026lt;=peo_num;i++) { printf(\u0026#34;玩家%d的单词是...\\n\u0026#34;,i); system(\u0026#34;pause\u0026#34;); system(\u0026#34;cls\u0026#34;); if(wd_pla[i-1]==1) printf(\u0026#34;玩家%i的单词是%s\\n\u0026#34;,i,wd[ca_num].c_str()); else printf(\u0026#34;玩家%i的单词是%s\\n\u0026#34;,i,pm[ca_num].c_str()); system(\u0026#34;pause\u0026#34;); system(\u0026#34;cls\u0026#34;); } while(!(pm_win(peo_num,peo_life,wd_pla)||wd_win(peo_num,peo_life,wd_pla))) { short answer=0; printf(\u0026#34;请选出得票最高者:\u0026#34;); scanf(\u0026#34;%d\u0026#34;,\u0026amp;answer); while (!(peo_life[answer-1]==1\u0026amp;\u0026amp;peo_num\u0026gt;=answer)) { system(\u0026#34;cls\u0026#34;); if (peo_num\u0026lt;answer) printf(\u0026#34;没有这个人\\n\u0026#34;); else printf(\u0026#34;这个人已出局\\n\u0026#34;); printf(\u0026#34;请选出得票最高者:\u0026#34;); scanf(\u0026#34;%d\u0026#34;,\u0026amp;answer); } peo_life[answer-1]=0; system(\u0026#34;cls\u0026#34;); } if(pm_win(peo_num,peo_life,wd_pla)) printf(\u0026#34;平民胜利!\\n\u0026#34;); else printf(\u0026#34;卧底胜利!\\n\u0026#34;); system(\u0026#34;pause\u0026#34;); } bool pm_win(int peo_num,bool *peo_life,bool *wd_pla) { for(int i=0;i\u0026lt;peo_num;i++) { if(peo_life[i]==1\u0026amp;\u0026amp;wd_pla[i]==1) return 0; } return 1; } bool wd_win(int peo_num,bool *peo_life,bool *wd_pla) { for(int i=0;i\u0026lt;peo_num;i++) { if(peo_life[i]==1\u0026amp;\u0026amp;wd_pla[i]==0) return 0; } return 1; }   人机对战井字棋：\ninclude\u0026lt;stdio.h\u0026gt;#include\u0026lt;stdlib.h\u0026gt;#include\u0026lt;vector\u0026gt;#define GETBIT(ITEM,POS) ((ITEM)\u0026gt;\u0026gt;(POS)\u0026amp;1) #define SETBIT(ITEM,POS,VALUE) ((VALUE)?(ITEM)|1\u0026lt;\u0026lt;(POS):(ITEM)\u0026amp;~(1\u0026lt;\u0026lt;(POS))) using namespace std; struct State { enum BlockType{Empty=0,Black=1,White=2}; enum EndType{No,BlackWin,WhiteWin,Dogfall}; int data; State(int _data=0):data(_data) { } BlockType getBlockData(int x,int y) { return BlockType(data\u0026gt;\u0026gt;(3*x+y-4)*2\u0026amp;3); } State setBlockData(int x,int y,BlockType val) { return State(data\u0026amp;~(3\u0026lt;\u0026lt;(3*x+y-4)*2)|val\u0026lt;\u0026lt;(3*x+y-4)*2); } EndType getEnd() { bool blackWin=blackIsWin(),whiteWin=whiteIsWin(); if(!blackWin\u0026amp;\u0026amp;!whiteWin) { if(isFull()) return Dogfall; return No; } if(blackWin\u0026amp;\u0026amp;!whiteWin) return BlackWin; if(!blackWin\u0026amp;\u0026amp;whiteWin) return WhiteWin; } bool blackIsWin() { for(int i=1;i\u0026lt;=3;i++) { if(getBlockData(i,1)==Black\u0026amp;\u0026amp;getBlockData(i,2)==Black\u0026amp;\u0026amp;getBlockData(i,3)==Black) return 1; } for(int i=1;i\u0026lt;=3;i++) { if(getBlockData(1,i)==Black\u0026amp;\u0026amp;getBlockData(2,i)==Black\u0026amp;\u0026amp;getBlockData(3,i)==Black) return 1; } if(getBlockData(1,1)==Black\u0026amp;\u0026amp;getBlockData(2,2)==Black\u0026amp;\u0026amp;getBlockData(3,3)==Black) return 1; if(getBlockData(1,3)==Black\u0026amp;\u0026amp;getBlockData(2,2)==Black\u0026amp;\u0026amp;getBlockData(3,1)==Black) return 1; } bool whiteIsWin() { for(int i=1;i\u0026lt;=3;i++) { if(getBlockData(i,1)==White\u0026amp;\u0026amp;getBlockData(i,2)==White\u0026amp;\u0026amp;getBlockData(i,3)==White) return 1; } for(int i=1;i\u0026lt;=3;i++) { if(getBlockData(1,i)==White\u0026amp;\u0026amp;getBlockData(2,i)==White\u0026amp;\u0026amp;getBlockData(3,i)==White) return 1; } if(getBlockData(1,1)==White\u0026amp;\u0026amp;getBlockData(2,2)==White\u0026amp;\u0026amp;getBlockData(3,3)==White) return 1; if(getBlockData(1,3)==White\u0026amp;\u0026amp;getBlockData(2,2)==White\u0026amp;\u0026amp;getBlockData(3,1)==White) return 1; } bool isFull() { for(int i=1;i\u0026lt;=3;i++) { for(int j=1;j\u0026lt;=3;j++) { if(getBlockData(i,j)==Empty) return 0; } } return 1; } }; struct Node { enum Next{Black,White}; Next next; int end; vector\u0026lt;int\u0026gt; nextNode; Node(Next _next=Black,int _end=0):next(_next),end(_end) { } }nodes[262144]; int dfs(State state) { State::EndType end=state.getEnd(); if(end!=State::No) return nodes[state.data].end=(end==State::BlackWin?1:(end==State::WhiteWin?-1:0)); int maxe=-1,mine=1; for(int i=1;i\u0026lt;=3;i++) { for(int j=1;j\u0026lt;=3;j++) { if(state.getBlockData(i,j)==State::Empty) { State tmp(state.setBlockData(i,j,nodes[state.data].next==Node::Black?State::Black:State::White)); nodes[state.data].nextNode.push_back(tmp.data); nodes[tmp.data].next=(nodes[state.data].next==Node::Black?Node::White:Node::Black); int ans=dfs(tmp); maxe=max(maxe,ans),mine=min(mine,ans); } } } return nodes[state.data].end=(nodes[state.data].next==Node::Black?maxe:mine); } inline void print(State state) { char maps[4][4]; for(int i=1;i\u0026lt;=3;i++) { for(int j=1;j\u0026lt;=3;j++) maps[i][j]=(state.getBlockData(i,j)==State::Empty?\u0026#39; \u0026#39;:(state.getBlockData(i,j)==State::Black?\u0026#39;x\u0026#39;:\u0026#39;o\u0026#39;)); } printf(\u0026#34; | | \\n%c|%c|%c \\n--+-+--\\n%c|%c|%c \\n--+-+--\\n%c|%c|%c \\n| | \\n\u0026#34;,maps[1][1],maps[1][2],maps[1][3],maps[2][1],maps[2][2],maps[2][3],maps[3][1],maps[3][2],maps[3][3]); } inline int getNext(int at) { if(nodes[at].next==Node::Black) { int maxe=-1,ans; for(int i=0;i\u0026lt;nodes[at].nextNode.size();i++) { if(maxe\u0026lt;nodes[nodes[at].nextNode[i]].end) { maxe=nodes[nodes[at].nextNode[i]].end; ans=nodes[at].nextNode[i]; } } return ans; } else { int mine=1,ans; for(int i=0;i\u0026lt;nodes[at].nextNode.size();i++) { if(mine\u0026gt;nodes[nodes[at].nextNode[i]].end) { mine=nodes[nodes[at].nextNode[i]].end; ans=nodes[at].nextNode[i]; } } return ans; } } int at=0; State::BlockType type; int main() { nodes[0].next=Node::Black; dfs(State(0)); printf(\u0026#34;Choose \\\u0026#34;x\\\u0026#34;or \\\u0026#34;o\\\u0026#34;(\\\u0026#34;x\\\u0026#34;is the first):\u0026#34;); char ch; scanf(\u0026#34;%c\u0026#34;,\u0026amp;ch); if(ch==\u0026#39;x\u0026#39;) { type=State::Black; print(State(at)); int x,y; scanf(\u0026#34;%d %d\u0026#34;,\u0026amp;x,\u0026amp;y); while(State(at).getBlockData(x,y)!=State::Empty) { printf(\u0026#34;This block is not empty!\\n\u0026#34;); scanf(\u0026#34;%d %d\u0026#34;,\u0026amp;x,\u0026amp;y); } at=State(at).setBlockData(x,y,type).data; State::EndType end=State(at).getEnd(); if(end==State::BlackWin) { printf(\u0026#34;\\\u0026#34;x\\\u0026#34;is WIN!\\n\u0026#34;); system(\u0026#34;pause\u0026#34;); return 0; } else if(end==State::WhiteWin) { printf(\u0026#34;\\\u0026#34;o\\\u0026#34;is WIN!\\n\u0026#34;); system(\u0026#34;pause\u0026#34;); return 0; } else if(end==State::Dogfall) { printf(\u0026#34;Dogfall!\\n\u0026#34;); system(\u0026#34;pause\u0026#34;); return 0; } } else type=State::White; while(1) { at=getNext(at); print(State(at)); State::EndType end=State(at).getEnd(); if(end==State::BlackWin) { printf(\u0026#34;\\\u0026#34;x\\\u0026#34;is WIN!\\n\u0026#34;); system(\u0026#34;pause\u0026#34;); return 0; } else if(end==State::WhiteWin) { printf(\u0026#34;\\\u0026#34;o\\\u0026#34;is WIN!\\n\u0026#34;); system(\u0026#34;pause\u0026#34;); return 0; } else if(end==State::Dogfall) { printf(\u0026#34;Dogfall!\\n\u0026#34;); system(\u0026#34;pause\u0026#34;); return 0; } int x,y; scanf(\u0026#34;%d %d\u0026#34;,\u0026amp;x,\u0026amp;y); while(State(at).getBlockData(x,y)!=State::Empty) { printf(\u0026#34;This block is not empty!\\n\u0026#34;); scanf(\u0026#34;%d %d\u0026#34;,\u0026amp;x,\u0026amp;y); } at=State(at).setBlockData(x,y,type).data; end=State(at).getEnd(); if(end==State::BlackWin) { printf(\u0026#34;\\\u0026#34;x\\\u0026#34;is WIN!\\n\u0026#34;); system(\u0026#34;pause\u0026#34;); return 0; } else if(end==State::WhiteWin) { printf(\u0026#34;\\\u0026#34;o\\\u0026#34;is WIN!\\n\u0026#34;); system(\u0026#34;pause\u0026#34;); return 0; } else if(end==State::Dogfall) { printf(\u0026#34;Dogfall!\\n\u0026#34;); system(\u0026#34;pause\u0026#34;); return 0; } } return 0; }   小公举养成记：\ninclude\u0026lt;iostream\u0026gt;#include\u0026lt;stdio.h\u0026gt;#include\u0026lt;stdlib.h\u0026gt;#include\u0026lt;time.h\u0026gt;#include\u0026lt;string\u0026gt;#include\u0026lt;cstring\u0026gt;#include\u0026lt;fstream\u0026gt;#define CH_L 1024 using namespace std; int r_seed=time(0); int random(int a,int b); void game(char d_name[CH_L],char f_name[CH_L],int b_month,int b_data,char d_star[128],int sub_i[5],int money,int t_year,int t_month,bool t_talk,bool t_gift); int main() { char cmd=0; printf(\u0026#34;请选择游戏模式:\\n①新游戏\\n②读档\\n\u0026#34;); cin\u0026gt;\u0026gt;cmd; if(cmd==\u0026#39;1\u0026#39;) { char d_name[CH_L]={};//女儿名字 \tchar f_name[CH_L]={};//父亲名字 \tchar d_star[128]={};//星座名字 \tint b_month=0;//生日月份 \tint b_data=0;//生日日期 \tstring star[12][2]={ {\u0026#34;摩羯座\u0026#34;,\u0026#34;水瓶座\u0026#34;},//1月 \t{\u0026#34;水瓶座\u0026#34;,\u0026#34;双鱼座\u0026#34;},//2月 \t{\u0026#34;双鱼座\u0026#34;,\u0026#34;白羊座\u0026#34;},//3月 \t{\u0026#34;白羊座\u0026#34;,\u0026#34;金牛座\u0026#34;},//4月 \t{\u0026#34;金牛座\u0026#34;,\u0026#34;双子座\u0026#34;},//5月 \t{\u0026#34;双子座\u0026#34;,\u0026#34;巨蟹座\u0026#34;},//6月 \t{\u0026#34;巨蟹座\u0026#34;,\u0026#34;狮子座\u0026#34;},//7月 \t{\u0026#34;狮子座\u0026#34;,\u0026#34;处女座\u0026#34;},//8月 \t{\u0026#34;处女座\u0026#34;,\u0026#34;天秤座\u0026#34;},//9月 \t{\u0026#34;天秤座\u0026#34;,\u0026#34;天蝎座\u0026#34;},//10月 \t{\u0026#34;天蝎座\u0026#34;,\u0026#34;射手座\u0026#34;},//11月 \t{\u0026#34;射手座\u0026#34;,\u0026#34;摩羯座\u0026#34;} //12月 \t};//十二星座列表 \tint star_d[12]={20,19,21,20,21,22,22,22,23,22,21,22};//十二星座跨度表 \t//星座算法:star[month-1][data/star_d[month-1]] \tprintf(\u0026#34;请输入父亲姓名:\u0026#34;); scanf(\u0026#34;%s\u0026#34;,f_name); printf(\u0026#34;请输入女儿姓名:\u0026#34;); scanf(\u0026#34;%s\u0026#34;,d_name); printf(\u0026#34;请输入女儿出生月日(MM DD):\u0026#34;); scanf(\u0026#34;%d %d\u0026#34;,\u0026amp;b_month,\u0026amp;b_data); strcpy(d_star,star[b_month-1][b_data/star_d[b_month-1]].c_str()); //根据星座初始化属性 \tconst char sub_name[5][127]={\u0026#34;体力\u0026#34;,\u0026#34;智力\u0026#34;,\u0026#34;魅力\u0026#34;,\u0026#34;道德\u0026#34;,\u0026#34;气质\u0026#34;}; int sub_i[5]={}; int money=500; if(star[b_month-1][b_data/star_d[b_month-1]]==\u0026#34;摩羯座\u0026#34;) { sub_i[0]=56; sub_i[1]=21; sub_i[2]=16; sub_i[3]=25; sub_i[4]=23; } else if(star[b_month-1][b_data/star_d[b_month-1]]==\u0026#34;水瓶座\u0026#34;) { sub_i[0]=41; sub_i[1]=43; sub_i[2]=20; sub_i[3]=23; sub_i[4]=17; } else if(star[b_month-1][b_data/star_d[b_month-1]]==\u0026#34;双鱼座\u0026#34;) { sub_i[0]=41; sub_i[1]=20; sub_i[2]=29; sub_i[3]=23; sub_i[4]=32; } else if(star[b_month-1][b_data/star_d[b_month-1]]==\u0026#34;白羊座\u0026#34;) { sub_i[0]=80; sub_i[1]=15; sub_i[2]=15; sub_i[3]=11; sub_i[4]=21; } else if(star[b_month-1][b_data/star_d[b_month-1]]==\u0026#34;金牛座\u0026#34;) { sub_i[0]=46; sub_i[1]=30; sub_i[2]=28; sub_i[3]=20; sub_i[4]=29; } else if(star[b_month-1][b_data/star_d[b_month-1]]==\u0026#34;双子座\u0026#34;) { sub_i[0]=50; sub_i[1]=35; sub_i[2]=23; sub_i[3]=8; sub_i[4]=20; } else if(star[b_month-1][b_data/star_d[b_month-1]]==\u0026#34;巨蟹座\u0026#34;) { sub_i[0]=40; sub_i[1]=31; sub_i[2]=33; sub_i[3]=17; sub_i[4]=33; } else if(star[b_month-1][b_data/star_d[b_month-1]]==\u0026#34;狮子座\u0026#34;) { sub_i[0]=85; sub_i[1]=9; sub_i[2]=11; sub_i[3]=20; sub_i[4]=37; } else if(star[b_month-1][b_data/star_d[b_month-1]]==\u0026#34;处女座\u0026#34;) { sub_i[0]=35; sub_i[1]=28; sub_i[2]=36; sub_i[3]=18; sub_i[4]=40; } else if(star[b_month-1][b_data/star_d[b_month-1]]==\u0026#34;天秤座\u0026#34;) { sub_i[0]=42; sub_i[1]=33; sub_i[2]=25; sub_i[3]=32; sub_i[4]=28; } else if(star[b_month-1][b_data/star_d[b_month-1]]==\u0026#34;天蝎座\u0026#34;) { sub_i[0]=50; sub_i[1]=25; sub_i[2]=40; sub_i[3]=18; sub_i[4]=17; } else if(star[b_month-1][b_data/star_d[b_month-1]]==\u0026#34;射手座\u0026#34;) { sub_i[0]=57; sub_i[1]=31; sub_i[2]=15; sub_i[3]=19; sub_i[4]=20; } printf(\u0026#34;----------------游戏开始----------------\\n一天,%s收养了流浪的%s,开始了新生活\\n\u0026#34;,f_name,d_name); game(d_name,f_name,b_month,b_data,d_star,sub_i,money,1659,b_month,1,1); system(\u0026#34;pause\u0026#34;); } else { //读档 \tchar d_name[CH_L]={};//女儿名字 \tchar f_name[CH_L]={};//父亲名字 \tchar d_star[128]={};//星座名字 \tint b_month=0;//生日月份 \tint b_data=0;//生日日期 \tstring star[12][2]={ {\u0026#34;摩羯座\u0026#34;,\u0026#34;水瓶座\u0026#34;},//1月 \t{\u0026#34;水瓶座\u0026#34;,\u0026#34;双鱼座\u0026#34;},//2二 \t{\u0026#34;双鱼座\u0026#34;,\u0026#34;白羊座\u0026#34;},//3月 \t{\u0026#34;白羊座\u0026#34;,\u0026#34;金牛座\u0026#34;},//4月 \t{\u0026#34;金牛座\u0026#34;,\u0026#34;双子座\u0026#34;},//5月 \t{\u0026#34;双子座\u0026#34;,\u0026#34;巨蟹座\u0026#34;},//6月 \t{\u0026#34;巨蟹座\u0026#34;,\u0026#34;狮子座\u0026#34;},//7月 \t{\u0026#34;狮子座\u0026#34;,\u0026#34;处女座\u0026#34;},//8月 \t{\u0026#34;处女座\u0026#34;,\u0026#34;天秤座\u0026#34;},//9月 \t{\u0026#34;天秤座\u0026#34;,\u0026#34;天蝎座\u0026#34;},//10月 \t{\u0026#34;天蝎座\u0026#34;,\u0026#34;射手座\u0026#34;},//11月 \t{\u0026#34;射手座\u0026#34;,\u0026#34;摩羯座\u0026#34;} //12月 \t};//十二星座列表 \tint star_d[12]={20,19,21,20,21,22,22,22,23,22,21,22};//十二星座跨度表 \t//星座算法:star[month-1][data/star_d[month-1]] \tint sub_i[5]={}; int money; int t_year,t_month; bool t_talk,t_gift; fstream ifile(\u0026#34;game_data.dat\u0026#34;,ios::in|ios::binary); while(!ifile) { printf(\u0026#34;未找到存档文件game_data.dat,请将存档文件放在当前目录下并重命名为game_data.dat\\n\u0026#34;); system(\u0026#34;pause\u0026#34;); ifile.open(\u0026#34;game_data.dat\u0026#34;,ios::in|ios::binary); } ifile.read(d_name,sizeof(d_name)); ifile.read(f_name,sizeof(f_name)); ifile.read((char*)(\u0026amp;b_month),sizeof(b_month)); ifile.read((char*)(\u0026amp;b_data),sizeof(b_data)); ifile.read((char*)(sub_i),sizeof(sub_i)); ifile.read((char*)(\u0026amp;money),sizeof(money)); ifile.read((char*)(\u0026amp;t_year),sizeof(t_year)); ifile.read((char*)(\u0026amp;t_month),sizeof(t_month)); ifile.read((char*)(\u0026amp;t_talk),sizeof(t_talk)); ifile.read((char*)(\u0026amp;t_gift),sizeof(t_gift)); strcpy(d_star,star[b_month-1][b_data/star_d[b_month-1]].c_str()); game(d_name,f_name,b_month,b_data,d_star,sub_i,money,t_year,t_month,t_talk,t_gift); system(\u0026#34;pause\u0026#34;); } return 0; } int random(int a,int b) { srand(r_seed); r_seed++; return rand()%(b-a+1)+a; } void game(char d_name[CH_L],char f_name[CH_L],int b_month,int b_data,char d_star[128],int sub_i[5],int money,int t_year,int t_month,bool t_talk,bool t_gift) { const char sub_name[5][127]={\u0026#34;体力\u0026#34;,\u0026#34;智力\u0026#34;,\u0026#34;魅力\u0026#34;,\u0026#34;道德\u0026#34;,\u0026#34;气质\u0026#34;}; for(int year=t_year;year\u0026lt;=1659+8;year++) { for(int month=(year==t_year)?t_month:1;month\u0026lt;=12;month++) { bool gift=((year==t_year\u0026amp;\u0026amp;month==t_month)?t_gift:1); printf(\u0026#34;当前时间:%d年%d月\\n\u0026#34;,year,month); if(month==b_month\u0026amp;\u0026amp;gift) { //进行生日操作 \t//岁数计算:year-1648 \tprintf(\u0026#34;今天是%s的%d岁生日,要花200金买礼物吗?(y/n)\\n\u0026#34;,d_name,year-1649); char tmp; cin\u0026gt;\u0026gt;tmp; if(tmp==\u0026#39;y\u0026#39;) { if(money\u0026gt;=200) { printf(\u0026#34;花费200金买了个精美的礼物,%s很开心\\n\u0026#34;,d_name); //对属性进行操作,并通知玩家 \tmoney-=200; for(int i=0;i\u0026lt;5;i++) { int tmp=random(1,15); sub_i[i]+=tmp; printf(\u0026#34;%s+%d\\n\u0026#34;,sub_name[i],tmp); } gift=0; } else printf(\u0026#34;钱不够\\n\u0026#34;); } } //进行月份安排 \tbool talk=((year==t_year\u0026amp;\u0026amp;month==t_month)?t_talk:1);//是否谈过话 \tfor(bool finish=0;!finish;) { char cmd; printf(\u0026#34;要做什么事吗?\\n①查看状态\\n②安排行程\\n③谈话\\n④存档\\n\u0026#34;); cin\u0026gt;\u0026gt;cmd; switch(cmd) { case \u0026#39;1\u0026#39;: //显示状态 \tprintf(\u0026#34;金币:%d\\n星座:%s\\n\u0026#34;,money,d_star); for(int i=0;i\u0026lt;5;i++) { printf(\u0026#34;%s:%-4d\u0026#34;,sub_name[i],sub_i[i]); for(int j=1;j\u0026lt;=10;j++) { if(sub_i[i]/10\u0026gt;=j) printf(\u0026#34;■\u0026#34;); else printf(\u0026#34;□\u0026#34;); } printf(\u0026#34;\\n\u0026#34;); } break; case \u0026#39;2\u0026#39;: //安排行程 \tfor(int i=0;i\u0026lt;3;i++) { char cmd; printf(\u0026#34;%d月%s,要做些什么呢?\\n①学习武艺\\n②上私塾\\n③学习礼法\\n④打工赚钱\\n\u0026#34;,month,i==0?\u0026#34;上旬\u0026#34;:(i==1?\u0026#34;中旬\u0026#34;:\u0026#34;下旬\u0026#34;)); cin\u0026gt;\u0026gt;cmd; switch(cmd) { case \u0026#39;1\u0026#39;: if(money==0) { printf(\u0026#34;没钱了,强制打工\\n\u0026#34;); int tmp=random(100,250); money+=tmp; printf(\u0026#34;金钱+%d\\n\u0026#34;,tmp); break; } else { int tmp1=random(0,5); int tmp2=random(0,5); int tmp3=random(0,10); printf(\u0026#34;哼哼哈兮,快使用双节棍...\\n\u0026#34;); printf(\u0026#34;%s+%d\\n%s+%d\\n金钱-%d\\n\u0026#34;,sub_name[0],tmp1,sub_name[2],tmp2,tmp3\u0026lt;=money?tmp3:money); sub_i[0]+=tmp1; sub_i[2]+=tmp2; money-=tmp3\u0026lt;=money?tmp3:money; break; } case \u0026#39;2\u0026#39;: if(money==0) { printf(\u0026#34;没钱了,强制打工\\n\u0026#34;); int tmp=random(100,250); money+=tmp; printf(\u0026#34;金钱+%d\\n\u0026#34;,tmp); break; } else { int tmp1=random(0,5); int tmp2=random(0,5); int tmp3=random(0,10); printf(\u0026#34;学而不思则罔,思而不学则殆...\\n\u0026#34;); printf(\u0026#34;%s+%d\\n%s+%d\\n金钱-%d\\n\u0026#34;,sub_name[1],tmp1,sub_name[4],tmp2,tmp3\u0026lt;=money?tmp3:money); sub_i[1]+=tmp1; sub_i[4]+=tmp2; money-=tmp3\u0026lt;=money?tmp3:money; break; } case \u0026#39;3\u0026#39;: if(money==0) { printf(\u0026#34;没钱了,强制打工\\n\u0026#34;); int tmp=random(100,250); money+=tmp; printf(\u0026#34;金钱+%d\\n\u0026#34;,tmp); break; } else { int tmp1=random(0,5); int tmp2=random(0,5); int tmp3=random(0,10); printf(\u0026#34;中国,是礼仪之邦...\\n\u0026#34;); printf(\u0026#34;%s+%d\\n%s+%d\\n金钱-%d\\n\u0026#34;,sub_name[3],tmp1,sub_name[4],tmp2,tmp3\u0026lt;=money?tmp3:money); sub_i[3]+=tmp1; sub_i[4]+=tmp2; money-=tmp3\u0026lt;=money?tmp3:money; break; } default: { int tmp=random(100,250); money+=tmp; printf(\u0026#34;金钱+%d\\n\u0026#34;,tmp); break; } } } finish=1; break; case \u0026#39;3\u0026#39;: if(talk) { //谈话 \tint cmd; printf(\u0026#34;请选择谈话方式:\\n①打招呼\\n②聊天\\n③严厉的教育\\n④给零花钱\\n\u0026#34;); scanf(\u0026#34;%d\u0026#34;,\u0026amp;cmd); switch(cmd) { case 1: printf(\u0026#34;哈喽!\\n\u0026#34;); //打招呼无影响 \tbreak; case 2: printf(\u0026#34;......\\n\u0026#34;); //聊天无影响 \tbreak; case 3: { printf(\u0026#34;你对%s进行了严厉的教育\\n\u0026#34;,d_name); int l_d=random(0,15); sub_i[3]+=l_d; printf(\u0026#34;%s+%d\\n\u0026#34;,sub_name[3],l_d); } break; default: printf(\u0026#34;你给了%s零花钱100金\\n\u0026#34;,d_name); //对属性进行操作,并通知玩家 \tif(money\u0026gt;=100) { money-=100; int num=random(10,25); int l_sub_i[5]={}; for(int i=0;i\u0026lt;num;i++) { l_sub_i[random(0,4)]++; } for(int i=0;i\u0026lt;5;i++) { sub_i[i]+=l_sub_i[i]; if(l_sub_i[i]\u0026gt;0) printf(\u0026#34;%s+%d\\n\u0026#34;,sub_name[i],l_sub_i[i]); } } else printf(\u0026#34;钱不够,需100金\\n\u0026#34;); break; } talk=0; } else printf(\u0026#34;这个月已谈话\\n\u0026#34;); break; default: fstream ofile(\u0026#34;game_data.dat\u0026#34;,ios::out|ios::binary); ofile.write(d_name,CH_L); ofile.write(f_name,CH_L); ofile.write((char*)(\u0026amp;b_month),sizeof(b_month)); ofile.write((char*)(\u0026amp;b_data),sizeof(b_data)); ofile.write((char*)(sub_i),20); ofile.write((char*)(\u0026amp;money),sizeof(money)); ofile.write((char*)(\u0026amp;year),sizeof(year)); ofile.write((char*)(\u0026amp;month),sizeof(month)); ofile.write((char*)(\u0026amp;talk),sizeof(talk)); ofile.write((char*)(\u0026amp;gift),sizeof(gift)); printf(\u0026#34;已存档为game_data.dat\\n\u0026#34;); ofile.close(); break; } } } } //进行结局判定 \tif(sub_i[0]+sub_i[1]+sub_i[2]+sub_i[3]+sub_i[4]\u0026gt;=2000) printf(\u0026#34;经过刻苦修炼,恭喜你登基为女王陛下!!!\\n----------------游戏结束----------------\\n\u0026#34;);//女王 \telse if(sub_i[0]+sub_i[1]+sub_i[2]+sub_i[3]+sub_i[4]\u0026gt;=1800) printf(\u0026#34;经过刻苦修炼,恭喜你成为为王妃!!\\n----------------游戏结束----------------\\n\u0026#34;);//王妃 \telse if(sub_i[0]+sub_i[1]+sub_i[2]+sub_i[3]+sub_i[4]\u0026gt;=1600) printf(\u0026#34;经过刻苦修炼,恭喜你成为为女将军!\\n----------------游戏结束----------------\\n\u0026#34;);//女将军 \telse if(sub_i[0]+sub_i[1]+sub_i[2]+sub_i[3]+sub_i[4]\u0026gt;=1200) { if(sub_i[0]\u0026gt;sub_i[1]\u0026amp;\u0026amp;sub_i[0]\u0026gt;sub_i[2]\u0026amp;\u0026amp;sub_i[0]\u0026gt;sub_i[3]\u0026amp;\u0026amp;sub_i[0]\u0026gt;sub_i[4]) printf(\u0026#34;经过刻苦修炼,恭喜你成为为近卫骑士团长!\\n----------------游戏结束----------------\\n\u0026#34;);//近卫骑士团长 \telse if(sub_i[1]\u0026gt;sub_i[0]\u0026amp;\u0026amp;sub_i[1]\u0026gt;sub_i[2]\u0026amp;\u0026amp;sub_i[1]\u0026gt;sub_i[3]\u0026amp;\u0026amp;sub_i[1]\u0026gt;sub_i[4]) printf(\u0026#34;经过刻苦修炼,恭喜你成为为皇家学院总裁!\\n----------------游戏结束----------------\\n\u0026#34;);//皇家学院总裁 \telse if(sub_i[2]\u0026gt;sub_i[1]\u0026amp;\u0026amp;sub_i[2]\u0026gt;sub_i[0]\u0026amp;\u0026amp;sub_i[2]\u0026gt;sub_i[3]\u0026amp;\u0026amp;sub_i[2]\u0026gt;sub_i[4]) printf(\u0026#34;经过刻苦修炼,恭喜你成为为国王的宠妃!\\n----------------游戏结束----------------\\n\u0026#34;);//国王的宠妃 \telse if(sub_i[3]\u0026gt;sub_i[1]\u0026amp;\u0026amp;sub_i[3]\u0026gt;sub_i[2]\u0026amp;\u0026amp;sub_i[3]\u0026gt;sub_i[0]\u0026amp;\u0026amp;sub_i[3]\u0026gt;sub_i[4]) printf(\u0026#34;经过刻苦修炼,恭喜你成为为高级祭祀!\\n----------------游戏结束----------------\\n\u0026#34;);//高级祭祀 \telse if(sub_i[4]\u0026gt;sub_i[1]\u0026amp;\u0026amp;sub_i[4]\u0026gt;sub_i[2]\u0026amp;\u0026amp;sub_i[4]\u0026gt;sub_i[3]\u0026amp;\u0026amp;sub_i[4]\u0026gt;sub_i[0]) printf(\u0026#34;经过刻苦修炼,恭喜你成为为公主!\\n----------------游戏结束----------------\\n\u0026#34;);//公主 \t} else//随机\t农妇,魔术师,修女,作家,酒吧女郎 \t{ int tmp=random(0,5); string job[5]={\u0026#34;农妇\u0026#34;,\u0026#34;魔术师\u0026#34;,\u0026#34;修女\u0026#34;,\u0026#34;作家\u0026#34;,\u0026#34;酒吧女郎\u0026#34;}; printf(\u0026#34;经过刻苦修炼,恭喜你成为为%s!\\n----------------游戏结束----------------\\n\u0026#34;,job[tmp].c_str()); } }   ","permalink":"https://cyx20080216.github.io/blog/post/little-games/","tags":["游戏"],"title":"小游戏集合"},{"categories":["题解"],"contents":"题目分析 读完题后，很容易就能看出来，这道题的核心是求两直线交点\n在这之前，我们要先算出这两条直线\n显然，这两条直线是给定的两座灯塔与船的连线（废话），可惜我们不知道船的位置\n我们虽然不知道船的具体位置，但是题目给了我们足以算出船相对与灯塔的方向的信息。所以，我们可以在这个方向或是反方向上取任意一点，因为同一直线上取任意两点计算得到的直线都是原直线\n具体步骤如下 这里以灯塔1为例\n我们用斜截式 $y=ax+b$ 表示该直线\n用 $x_{Light}$ 和 $y_{Light}$ 表示灯塔1的坐标\n用 $\\theta_{Boat}$ 表示船的航向\n用 $\\theta_{BoatToLight}$ 分别表示以船的航向为 $0^{\\circ}$ 下的灯塔相对于船的方向\n用 $\\theta_{LightToBoat}$ 分别表示的船相对于灯塔的方向\n用 $x_{FrontOfLight}$ 和 $y_{FrontOfLight}$ 表示位于灯塔1 $\\theta_{LightToBoat}$ 方向1单位长度的点的坐标\n画画图就可以轻易推出 $\\theta_{LightToBoat}=\\theta_{Boat}+\\theta_{BoatToLight}+180^{\\circ}$\n利用 $\\theta_{LightToBoat}$ 我们又可以求出 $x_{FrontOfLight}=x_{Light}+sin\\theta_{LightToBoat}$ 和 $y_{FrontOfLight}=y_{Light}+cos\\theta_{LightToBoat}$\n注：这里其实跟极坐标系差不多，只不过方向不一样\n所以， $a=\\frac{y_{Light}-y_{FrontOfLight}}{x_{Light}-x_{FrontOfLight}}$ $b=y_{Light}-ax_{Light}$\nCode 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75  #include\u0026lt;bits/stdc++.h\u0026gt;#define Pi 3.1415926535897932384626 using namespace std; struct Point { double x,y; Point(const double \u0026amp;x=0.0,const double \u0026amp;y=0.0): x(x), y(y) { } }; struct Line { double a,b; Line(const double \u0026amp;a=0.0,const double \u0026amp;b=0.0): a(a), b(b) { } }; inline Line twoPointToLine(const Point \u0026amp;a,const Point \u0026amp;b) { return Line((a.y-b.y)/(a.x-b.x),a.y-(a.y-b.y)/(a.x-b.x)*a.x); } inline Point twoLineToPoint(const Line \u0026amp;a,const Line \u0026amp;b) { return Point(-(a.b-b.b)/(a.a-b.a),-a.a*(a.b-b.b)/(a.a-b.a)+a.b); } Point light1,light2; double boatFOV; double light1FOV,light2FOV; inline void init() { int n; map\u0026lt;string,Point\u0026gt; light; scanf(\u0026#34;%d\u0026#34;,\u0026amp;n); for(int i=1;i\u0026lt;=n;i++) { string lightName; Point point; cin\u0026gt;\u0026gt;lightName; scanf(\u0026#34;%lf %lf\u0026#34;,\u0026amp;point.x,\u0026amp;point.y); light.insert(make_pair(lightName,point)); } scanf(\u0026#34;%lf\u0026#34;,\u0026amp;boatFOV); string lightName; cin\u0026gt;\u0026gt;lightName; light1=light.at(lightName); scanf(\u0026#34;%lf\u0026#34;,\u0026amp;light1FOV); cin\u0026gt;\u0026gt;lightName; light2=light.at(lightName); scanf(\u0026#34;%lf\u0026#34;,\u0026amp;light2FOV); } inline void solve() { Point frontOfLight1(light1.x+sin((boatFOV+light1FOV+180)*Pi/180.0),light1.y+cos((boatFOV+light1FOV+180)*Pi/180.0)); Point frontOfLight2(light2.x+sin((boatFOV+light2FOV+180)*Pi/180.0),light2.y+cos((boatFOV+light2FOV+180)*Pi/180.0)); Line light1ToBoat(twoPointToLine(light1,frontOfLight1)); Line light2ToBoat(twoPointToLine(light2,frontOfLight2)); if(light1ToBoat.a!=light2ToBoat.a) { Point boat(twoLineToPoint(light1ToBoat,light2ToBoat)); printf(\u0026#34;%.2lf %.2lf\\n\u0026#34;,boat.x,boat.y); } else printf(\u0026#34;NO ANSWER\\n\u0026#34;); } int main() { init(); solve(); return 0; }   ","permalink":"https://cyx20080216.github.io/blog/post/solution-p2013/","tags":["题解","洛谷"],"title":"题解 P2013 无线电测向"}]